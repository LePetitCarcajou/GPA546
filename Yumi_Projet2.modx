MODULE Yumi_Projet2
!===========================================    
! Révisé par Ahmed Joubair (Septembre 2021)
!=========================================== 
! ----------------------------------------------------------------------------
! Programme : GPA546Lab1
! Auteurs : Martin EUZENAT ET Roberto LAFRAMBOISE
! Date : 22/05/2024
! Révision : 1.0
!
! Description :
! Ce programme permet de déposé des bloc en étoiles suite à une demande par l'opérateur.
! ----------------------------------------------------------------------------

!!!!! gripper experimentation : wi_tGripper
!!!!! gripper simulation : tPince

CONST bool IS_SIMULATED := FALSE; !Mettre FALSE pour l'expérimentation


! Donnees de type position enseignees

PERS wobjdata wobjFeuille:=[FALSE, TRUE, "",[[-452.022, 208.098, 16.4566],[0.00107744, 0.707705, 0.706507, 0.000243236]],[[-148.415,214.975,-1.9614],[0.00351374,0.999981,0.00219485,-0.00459184]]];
PERS wobjdata wobjTable:=[FALSE, TRUE, "",[[-452.022, 208.098, 16.4566],[0.00107744, 0.707705, 0.706507, 0.000243236]],[[0,0,0],[1,0,0,0]]];

PERS robtarget rGlissoire:=[[76.69,271.22,-50.11],[0.951829,0.000208165,0.306451,-0.0104055],[-1,-2,-1,4],[76.6242,0,0,0,0,0]];
PERS robtarget rRetrait:=[[-284.43,78.13,-300.00],[0.999406,-0.0104761,0.0268698,0.0188667],[0,0,-1,4],[29.7439,0,0,0,0,0]];
PERS jointtarget jRetrait:=[[-39.1101,-29.224,6.0023,-29.7862,76.8587,-53.1759],[-112.228,0,0,0,0,0]];


PERS num NbBranches; ! Valeur qui changera grace à la procédure de demande de config


! Donnees de type position calculees
VAR robtarget rFigure:=[[0,0,0],[1,0,0,0],[0,0,0,0],[0,0,0,0,0,0]];
VAR robtarget rCentrefeuille:=[[-139,108,5],[1,0,0,0],[0,-1,0,4],[29.7441,0,0,0,0,0]];
VAR robtarget rGlissoire_180:=[[0,0,0],[1,0,0,0],[0,0,0,0],[0,0,0,0,0,0]];


! Données de type Variable
VAR num EpaisMM:=Epaisseur*PouceToMM;
VAR num distanceSecurite;
VAR pos positionRetrait;
VAR pos positionActuelle;
VAR string differenceSecurite;
VAR bool orientation;
VAR num angle_decalage;
VAR num angle_check;
VAR num dist_decalage;
VAR robtarget rPrise:=[[0,0,0],[1,0,0,0],[0,0,0,0],[9E9,9E9,9E9,9E9,9E9,9E9]];

! Donnees de type constante
CONST num Epaisseur:=1; ! Épaisseur d'un bloc (en pouces)
CONST num PouceToMM:=25.4; ! Facteur de conversion
CONST num Decalage:=-100; ! Distance d'approche ou de retrait (mm)

! Vitesse d'approche et de retrait (mm/sec)
CONST speeddata LowSpeed:=[250,500,5000,1000];

! Vitesse maximale du robot (mm/sec)
CONST speeddata HighSpeed:=[1000,500,5000,1000];

! Etat des entrees/sorties
CONST dionum Ouverte:=0;
CONST dionum Fermee:=1;
CONST dionum Retracte:=0;
CONST dionum Extension:=1;

! Variable pour limiter la zone de travail du robot
VAR wztemporary EspaceRestreint;

!Alias
VAR signaldo LampeBleue;
VAR signaldo LampeOrange;
VAR signaldi pieceOrientation;
VAR signaldi piecePresente;
VAR signaldi verinOut;
VAR signaldi verinIn;
VAR signaldo extensionVerin;



! ----------------------------------------------------------------------------
! Procedure : main
! Auteurs : Martin EUZENAT & Roberto Laframboise
! Date : 14-06-2024
! Révision : 4.3
! Révision par: MArtin EUZENAT
! Description :
!Initialise le robot -> verifie la sécurite -> prend en compte le choix de l'operateur ->effectue la tâche
!
! ----------------------------------------------------------------------------
!**************************************************************************************
PROC main()

	!1) Initialisation :
	init;
    !2) Verification de la securité
    Securite;
    !3) Demande a l operateur le nombre d ebranche de l etoile
    demande_configuration;
    !4)  construit l etoile comme il le faut
    ProcedureEtoile;

    
ENDPROC
!**************************************************************************************

! ----------------------------------------------------------------------------
! Procedure : init
! Auteurs : Martin EUZENAT
! Date : 16/06/2026
! Révision : 3.5
! Révision par: Roberto LAFRAMBOISE
! Description :
! Routine qui initialise les variables systèmes et les états des sorties
!
! ----------------------------------------------------------------------------
!**************************************************************************************
PROC init()
    
    AliasIO CabinetIO_0_DO9_FV0101,extensionVerin;
    wobjTable.uframe:=wobjFeuille.uframe;
    G_init \Calibrate;
	VelSet 25,1000; ! Limitation imposée pour la sécurité, obligatoire
	SetDO extensionVerin, Retracte; ! Rentrer le vérin
	! Ouvrir la pince
    Pince_ouverture;
    WaitTime 1;
    
ENDPROC
!**************************************************************************************
! ----------------------------------------------------------------------------
! Procedure : Securite
! Auteurs : Martin EUZENAT
! Date : 03/06/2024
! Révision : 1.2
! Révision par : Roberto Laframboise
! Description :
! Routine permet d'effectuer la routine de sécurité afin de débuter le fonctionnement
! du robot 
!
PROC Securite()
    AliasIO CabinetIO_0_DO4_JB01_LampBlu,LampeBleue;
    AliasIO CabinetIO_0_DO5_JB01_LampOr,LampeOrange;
    
    positionActuelle:= CPos(\WObj:=wobjTable);
    positionRetrait:= rRetrait.trans;
    distanceSecurite:= Distance(positionActuelle,positionRetrait); !distance en position actuelle et la position souhaitée
    differenceSecurite:="deplacer le robot de"+NumToStr(distanceSecurite,0)+" mm"; 
    IF distanceSecurite<=50 THEN ! Validation réussie, allume lampe bleue 2 secondes
        TPErase;
        SetDO LampeBleue, 1;
        SetDO \SDelay:=2, LampeBleue, 0; !eteindre la lampe après 2s
        
        TPWrite "Validation de la position, Lancement du programme!";
        
    ELSE ! Validation pas réussie, affiche le détail de l'erreur et la distance, allume lampe orange 5 secondes
        SetDO LampeOrange,1;
        SetDO \SDelay:=5, LampeOrange, 0; !eteindre la lampe après 5s
        TPErase;
        TPReadFK reg1 ,"Voulez-vous aller en position de retrait", stEmpty,stEmpty,stEmpty,"Oui","Non" \MaxTime:=10.0;
        IF reg1 = 4 THEN
            ConfJ\On;
            MoveJ rRetrait,LowSpeed,z50,wi_tGripper\WObj:=wobjTable;
            ConfJ\off;
            WaitRob \ZeroSpeed;
            Securite;
        ELSE
            TPErase;
            TPWrite "Une erreur de position à lieu";
            TPWrite differenceSecurite;
            EXIT;
        ENDIF
    ENDIF
ENDPROC

!**************************************************************************************

! ----------------------------------------------------------------------------
! Procedure : Prise
! Auteurs : Martin EUZENAT
! Date : 16/06/2026
! Révision : 3.5
! Révision par : Roberto Laframboise
! Description :
! Routine qui s'approche du glissoire, atends une piece, 
! l'indexe et la prends de maniere securitaire
! La routine verifie l'orientation de la piece et corrige l'orientation de la pince
! ----------------------------------------------------------------------------
!**************************************************************************************
PROC Prise()
    AliasIO CabinetIO_0_DI9_ZS0101, piecePresente;
    AliasIO CabinetIO_0_DO9_FV0101,extensionVerin;
    AliasIO CabinetIO_0_DI14_ZS0104, verinOut;
    AliasIO CabinetIO_0_DI13_ZS0103,verinIn;
    AliasIO CabinetIO_0_DI10_ZS0102, pieceOrientation;
    rGlissoire_180:=RelTool(rGlissoire,0,0,0,\Rz:=180);
    
    ConfJ\On;
    MoveJ rRetrait,HighSpeed,z50,wi_tGripper\WObj:=wobjTable;
    ConfJ\Off;
    ! Vérification de présence de bloc dans la glissoire
	IF piecePresente = 0 THEN
		TPErase;
		TPWrite "Aucun bloc dans la glissoire";
		TPWrite "Placer deux bloc et remettre en mode AUTO";
		WaitDI piecePresente, 1; ! Attente d'un bloc
		Waittime 1; ! attente que le bloc se stabilise
	ENDIF
    !Test orientation piece 
    orientation:=TestDi(pieceOrientation);
    
    IF orientation = TRUE THEN
        rPrise:=rGlissoire;
    ENDIF 
    IF orientation = FALSE THEN
        rPrise:=rGlissoire_180;
    ENDIF
    !!On s'approche de la position!!!
        ConfJ\On;
    	MoveJ Reltool(rPrise,0,0,Decalage),HighSpeed,z50,wi_tGripper\WObj:=wobjTable;
        ConfJ\Off;
        
        SetDO CabinetIO_0_DO9_FV0101, Extension; ! Indexer le bloc durant le mouvement
        WAITDI CabinetIO_0_DI14_ZS0104,1; ! Attendre pour le vérin sortie
        
        !!!!!!On se met en position
        ConfL\On;
        MoveL rPrise, LowSpeed, fine,wi_tGripper\WObj:=wobjTable;
        ConfL\Off;
        SetDO CabinetIO_0_DO9_FV0101, Retracte;
        WAITDI CabinetIO_0_DI13_ZS0103,1;
        
        Pince_fermeture;! Fermer la pince
        
        !!!! on s'écarte!!!
        ConfL\On;
        MoveL Offs(rPrise,0,3,Decalage),LowSpeed,z50,wi_tGripper\WObj:=wobjTable;
        ConfL\Off;
    
ENDPROC
!**************************************************************************************
! ----------------------------------------------------------------------------
! Procedure : Procedure Etoiles
! Auteurs : Martin EUZENAT
! Date : 16/06/2026
! Révision : 4.0
! Révision par: Roberto LAFRAMBOISE
! Description :
! Routine qui initialise les variables systèmes et les états des sorties
!
! Parametre: recoit un robtarget où aller déposer le bloc avec aproche et degagement
! ----------------------------------------------------------------------------
!**************************************************************************************
PROC ProcedureEtoile()

    angle_decalage :=(360/(NbBranches+2));
    !apothème d'un polygone régulier https://fr.wikipedia.org/wiki/Apoth%C3%A8me
    
    dist_decalage:= 51+((EpaisMM)/(2*tan(180/(NbBranches+2)))); !ajout de la demi longeur + 1 mm de securite
    
    FOR i FROM 1 TO NbBranches+2 DO
        !On cherche la piece dans la glissière avec prise.
        !On deplace la piece au centre de depot
        
        Prise;
        ConfJ\On;
        MoveJ rRetrait,HighSpeed,z50,wi_tGripper\WObj:=wobjTable;
        ConfJ\Off;
        
        angle_check := (i-1)*(angle_decalage);
        
        !Ajout du sens de rotation de la pince pour eviter le blocage
        IF angle_check<-180 THEN
            angle_check := angle_check+360;
        ENDIF
        
        IF angle_check>180 THEN
            angle_check := angle_check-360;
        ENDIF
        rFigure:= RelTool(rCentrefeuille,0,0,0 \Rz:=(angle_check));
        rFigure:=RelTool(rFigure,0,0,0 \Rx:=180);
        rFigure:= RelTool(rFigure,0,-dist_decalage,0);
        WaitTime 1;
        Depot(rFigure);
    
    ENDFOR
    
    ConfJ\On;
    MoveABSJ jRetrait,HighSpeed,z50,wi_tGripper\WObj:=wobjTable;
    ConfJ\Off;
    TPErase;
    TPWrite "fin du programme mise en retrait du robot";

ENDPROC
! ----------------------------------------------------------------------------
! Procedure : Depot
! Auteurs : Martin EUZENAT
! Date : 16/06/2026
! Révision : 4.3
! Révision par: Roberto LAFRAMBOISE
! Description 
! Routine qui initialise les variables systèmes et les états des sorties
!
! Parametre: recoit un robtarget où aller déposer le bloc avec aproche et degagement
!
! ----------------------------------------------------------------------------
!**************************************************************************************
PROC Depot(robtarget rPosDepot)

    ConfJ\On;
    MoveJ rRetrait,HighSpeed,z50,wi_tGripper\WObj:=wobjTable;
    ConfJ\Off;
    MoveJ RelTool(rPosDepot,0,0,Decalage),HighSpeed,z50,wi_tGripper\WObj:=wobjFeuille;
    
    ConfL\off;
    MoveL rPosDepot, LowSpeed, fine,wi_tGripper\wobj:=wobjFeuille;

    Pince_ouverture;
    g_stop;
	MoveL RelTool(rPosDepot,0,0,Decalage), LowSpeed, z0,wi_tGripper\wobj:=wobjFeuille;
    ConfJ\On;
    MoveJ rRetrait,HighSpeed,z50,wi_tGripper\wobj:=wobjTable;
    ConfJ\Off;
ENDPROC
!**************************************************************************************
! ----------------------------------------------------------------------------
! Procedure : Pince_ouverture
! Auteurs : Martin EUZENAT
! Date : 30/05/2024
! Révision : 1.1
! Révision par:
! Description :
! Routine permet la fermeture de la pince simulation/experimentation
!
PROC Pince_ouverture()
    IF IS_SIMULATED THEN 
        !SetDO custom_DO_0_gClose,0;
        !SetDO custom_DO_1_gOpen, 1;
        WaitTime 1;
    ELSE
        g_GripOut; !experimentation
        WaitTime 1;
    ENDIF
ENDPROC
!**************************************************************************************
! ----------------------------------------------------------------------------
! Procedure : Pince_fermeture 
! Auteurs : Martin EUZENAT
! Date : 30/05/2024
! Révision : 1.1
! Révision par :
! Description :
! Routine permet la fermeture de la pince simulation/experimentation
!
PROC Pince_fermeture()
    
    IF IS_SIMULATED THEN
        !SetDO custom_DO_0_gClose,1;
        !SetDO custom_DO_1_gOpen,0;
        WaitTime 1;
    ELSE
        g_GripIn; !experimentation
        WaitTime 1;
    ENDIF
ENDPROC


!**************************************************************************************
! ----------------------------------------------------------------------------
! Procedure : demande_configuration
! Auteurs : Martin EUZENAT
! Date : 30/05/2024
! Révision : 1.1
! Révision par:
! Description :
! Cette procédure permet de demander la configuration souhaiter par l'utilisateur 
!et de stocker ce choix dans le but de l'exploiter
!
PROC demande_configuration()
    TPErase;
    TPReadFK NbBranches, "Nombre de branches", "3", "4","5", "6", "7",\MaxTime:=10.0;
    
    TPWrite "Configuration prise en compte. Attention au robot";
    WaitTime 1;
    
ENDPROC
!**************************************************************************************

ENDMODULE

