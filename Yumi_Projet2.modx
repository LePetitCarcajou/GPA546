MODULE Yumi_Projet2
!===========================================    
! Révisé par Ahmed Joubair (Septembre 2021)
!=========================================== 
! ----------------------------------------------------------------------------
! Programme : GPA546Lab1
! Auteurs : Martin ET Roberto
! Date : 22/05/2024
! Révision : 1.0
!
! Description :
! Ce programme permet de prendre deux blocs dans une glissoire et de les
! superposer sur une table de travail.
! ----------------------------------------------------------------------------

!!!!! gripper experimentation : wi_tGripper
!!!!! gripper simulation : tPince

CONST bool IS_SIMULATED := FALSE; !Mettre FALSE pour l'expérimentation


! Donnees de type position enseignees

!PERS tooldata wi_tGripper:=[TRUE,[[0,0,136],[1,0,0,0]],[0.262,[8.2,11.7,52],[1,0,0,0],0.00021,0.00024,0.00009]];
!PERS tooldata tPince:=[TRUE,[[0,0,114.2],[1,0,0,0]],[0.229,[7.9,12.4,48.7],[1,0,0,0],0.00021,0.00023,0.00008]];

PERS wobjdata wobjFeuille:=[FALSE, TRUE, "",[[-452.022, 208.098, 16.4566],[0.00107744, 0.707705, 0.706507, 0.000243236]],[[-148.415,214.975,-1.9614],[0.00351374,0.999981,0.00219485,-0.00459184]]];
PERS wobjdata wobjTable:=[FALSE, TRUE, "",[[-448.192, 214.145, 16.0387],[0.701409, 0.00060455, -0.00413555, -0.712747]],[[0,0,0],[1,0,0,0]]];
PERS robtarget rGlissoire:=[[-81.62,267.40,52.93],[0.274429,0.0252957,-0.961273,-0.00166078],[-1,1,2,5],[23.6103,0,0,0,0,0]];

PERS robtarget rRetrait:=[[198.78,131.59,282.02],[0.00478666,-0.999951,-0.00667389,0.005568],[-1,0,1,4],[6.03462,0,0,0,0,0]];
PERS jointtarget jRetrait:=[[-59.7859,-6.24041,23.5578,-6.37825,64.4109,93.2528],[-119.82,0,0,0,0,0]];




!PERS robtarget rDepot:=[[-123.77,109.44,3.83],[0.024925,-0.00660548,0.999461,-0.0203362],[0,-1,2,4],[33.0283,0,0,0,0,0]];
!PERS robtarget coin_feuille:=[[0,0,-200],[1,0,0,0],[0,0,0,0],[-1.30968,0,0,0,0,0]];

!PERS robtarget rCentreFeuille:=[[139.5,108,-20],[1,0,0,0],[0,0,0,0],[-1.30968,0,0,0,0,0]];

VAR robtarget rCentrefeuille:=[[0,0,0],[1,0,0,0],[0,0,0,0],[0,0,0,0,0,0]];



PERS num NbBranches; ! Valeur qui changera grace à la procédure de demande de config
! Donnees de type position calculees
VAR robtarget rFigure:=[[0,0,0],[1,0,0,0],[0,0,0,0],[0,0,0,0,0,0]];


! Donnees de type constante
CONST num Epaisseur:=1; ! Épaisseur d'un bloc (en pouces)
CONST num PouceToMM:=25.4; ! Facteur de conversion
CONST num Decalage:=-100; ! Distance d'approche ou de retrait (mm)

! Données de type Variable
VAR num EpaisMM:=Epaisseur*PouceToMM;
VAR num distanceSecurite;
VAR pos positionRetrait;
VAR pos positionActuelle;
VAR string differenceSecurite;
VAR bool orientation;
VAR robtarget rGlissoire_180;
VAR num angle_decalage;
VAR num dist_decalage;



! Vitesse d'approche et de retrait (mm/sec)
CONST speeddata LowSpeed:=[250,500,5000,1000];

! Vitesse maximale du robot (mm/sec)
CONST speeddata HighSpeed:=[1000,500,5000,1000];

! Etat des entrees/sorties
CONST dionum Ouverte:=0;
CONST dionum Fermee:=1;
CONST dionum Retracte:=0;
CONST dionum Extension:=1;

! Variable pour limiter la zone de travail du robot
VAR wztemporary EspaceRestreint;

!Alias
VAR signaldo LampeBleue;
VAR signaldo LampeOrange;
VAR signaldi pieceOrientation;
VAR signaldi piecePresente;
VAR signaldi verinOut;
VAR signaldi verinIn;
VAR signaldo extensionVerin;

!Variable configurable en fonctino de la configuration

PERS tooldata pince;

  ! ----------------------------------------------------------------------------
! Procedure : configuration
! Auteurs : Martin
! Date : 05/06/2024
! Révision : 
! Révision par: 
! Description :
! Routine qui permet attribuer les éléments correspondant à la configuratino expérimentale ou simulée 
!comme le tooldata et les procédure de d'ouverture fermeture de pince
! **** elle doit être en mode "cycle"
!
! ----------------------------------------------------------------------------
!**************************************************************************************
  
PROC configuration()
    IF IS_SIMULATED THEN
        pince:=[TRUE,[[0,0,114.2],[1,0,0,0]],[0.229,[7.9,12.4,48.7],[1,0,0,0],0.00021,0.00023,0.00008]];
    ELSE
        pince:=[TRUE,[[0,0,136],[1,0,0,0]],[0.262,[8.2,11.7,52],[1,0,0,0],0.00021,0.00024,0.00009]];
    ENDIF
ENDPROC
  
! ----------------------------------------------------------------------------
! Procedure : main
! Auteurs : Yanick Noiseux
! Date : 4-08-2011
! Révision : 1.1
! Révision par: Martin Gaudreault
! Description :
! Routine qui est executee par le robot initialement.
! **** elle doit être en mode "cycle"
!
! ----------------------------------------------------------------------------
!**************************************************************************************
PROC main()
    
    !wobjTable.uframe:=wobjFeuille.uframe;
    !configuration;
	! 1) Initialisation :
	init;
    ConfJ\On;
    MoveAbsJ jRetrait,HighSpeed,z50,wi_tGripper\WObj:=wobjTable;
    ConfJ\Off;
    !Verification de la securité
    !Securite;
    demande_configuration;
    
    ProcedureEtoile;
    
ENDPROC
!**************************************************************************************

! ----------------------------------------------------------------------------
! Procedure : init
! Auteurs : Yanick Noiseux
! Date : 4-08-2011
! Révision : 1.1
! Révision par: Martin Gaudreault
! Description :
! Routine qui initialise les variables systèmes et les états des sorties
!
! ----------------------------------------------------------------------------
!**************************************************************************************
PROC init()
    AliasIO CabinetIO_0_DO9_FV0101,extensionVerin;
    rCentreFeuille := RelTool(rCentrefeuille,279/2,0,0);
    rCentreFeuille:= RelTool(rCentrefeuille,0,216/2,0);
    ! %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Initialisation Smart gripper
    !g_Calibrate \Jog;
    G_init \Calibrate;
    !%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    
	VelSet 25,1000; ! Limitation imposée pour la sécurité, obligatoire

	SetDO extensionVerin, Retracte; ! Rentrer le vérin         %% IRB1600: CabinetIO_0_DO9_FV0101, Retracte
	 
    !g_GripOut; ! Ouvrir la pince
    Pince_ouverture;
    WaitTime 2;
    
ENDPROC
!**************************************************************************************

! ----------------------------------------------------------------------------
! Procedure : Prise
! Auteurs : Yanick Noiseux
! Date : 4-08-2011
! Révision : 1.0
!
! Description :
! Routine qui s'approche du glissoire, atends une piece, 
! l'indexe et la prends de maniere securitaire
!
! ----------------------------------------------------------------------------
!**************************************************************************************
PROC Prise()
    AliasIO CabinetIO_0_DI9_ZS0101, piecePresente;
    AliasIO CabinetIO_0_DO9_FV0101,extensionVerin;
    AliasIO CabinetIO_0_DI14_ZS0104, verinOut;
    AliasIO CabinetIO_0_DI13_ZS0103,verinIn;
    AliasIO CabinetIO_0_DI10_ZS0102, pieceOrientation;
    
    ConfJ\On;
    MoveAbsJ jRetrait,HighSpeed,z50,wi_tGripper\WObj:=wobjTable;
    ConfJ\Off;
    ! Vérification de présence de bloc dans la glissoire
	IF piecePresente = 0 THEN
		TPErase;
		TPWrite "Aucun bloc dans la glissoire";
		TPWrite "Placer deux bloc et remettre en mode AUTO";
		WaitDI piecePresente, 1; ! Attente d'un bloc
		Waittime 1; ! attente que le bloc se stabilise
	ENDIF
    !Test orientation piece 
    orientation:=TestDi(pieceOrientation);
    
    !!!!!On s'approche de la position!!!!
    ConfJ\On;
	MoveJ RelTool(rGlissoire,0,0,Decalage),HighSpeed,z50,wi_tGripper\WObj:=wobjTable;
    SetDO CabinetIO_0_DO9_FV0101, Extension; ! Indexer le bloc durant le mouvement
    WAITDI CabinetIO_0_DI14_ZS0104,1; ! Attendre pour le vérin sortie
    ConfJ\Off;
    ConfL\On;
    !!!!!!On se met en position
    MoveL rGlissoire, LowSpeed, fine,wi_tGripper\WObj:=wobjTable;
    SetDO CabinetIO_0_DO9_FV0101, Retracte;
    WAITDI CabinetIO_0_DI13_ZS0103,1;
    Pince_fermeture;! Fermer la pince
    MoveL RelTool(rGlissoire,0,0,Decalage),LowSpeed,z50,wi_tGripper\WObj:=wobjTable;
    ConfL\Off;
    
ENDPROC
!**************************************************************************************
! ----------------------------------------------------------------------------
! Procedure : Procedure Etoiles
! Auteurs : Yanick Noiseux
! Date : 4-08-2011
! Révision : 1.1
! Révision par: Martin Gaudreault
! Description :
! Routine qui initialise les variables systèmes et les états des sorties
!
! Parametre: recoit un robtarget où aller déposer le bloc avec aproche et degagement
! ----------------------------------------------------------------------------
!**************************************************************************************
PROC ProcedureEtoile()

     angle_decalage :=(360/(NbBranches+2))-1;
    !apothème d'un polygone régulier https://fr.wikipedia.org/wiki/Apoth%C3%A8me
    
    dist_decalage:= (EpaisMM+50/(cos(pi/NbBranches)));
    
    FOR i FROM 1 TO NbBranches+2 DO
        !On cherche la piece dans la glissière avec prise.
        !On deplace la piece au centre de depot
        Prise;
        ConfJ\On;
        MoveJ rRetrait,HighSpeed,z50,wi_tGripper\WObj:=wobjTable;
        ConfJ\Off;
        
        IF orientation = FALSE THEN
            rFigure:= RelTool(rCentrefeuille, 0,0,0 \Rz:=(180+(i*angle_decalage)));
            rFigure:= RelTool(rFigure,0,dist_decalage,0);
            rFigure:= RelTool(rFigure,0,0,-5);
        
            WaitTime 1.5;
            Depot(rFigure);
        ENDIF
        IF orientation = TRUE THEN
            rFigure:=RelTool(rCentrefeuille, 0,0,0 \Rz:=(i*angle_decalage));
            rFigure:= RelTool(rFigure,0,dist_decalage,0);
            rFigure:= RelTool(rFigure,0,0,-5);
            WaitTime 1.5;
            Depot(rFigure);
            
        ENDIF
        
    ENDFOR
    
    MoveABSJ jRetrait,HighSpeed,z50,wi_tGripper\WObj:=wobjTable;

ENDPROC
! ----------------------------------------------------------------------------
! Procedure : Depot
! Auteurs : Yanick Noiseux
! Date : 4-08-2011
! Révision : 1.1
! Révision par: Martin Gaudreault
! Description :
! Routine qui initialise les variables systèmes et les états des sorties
!
! Parametre: recoit un robtarget où aller déposer le bloc avec aproche et degagement
!
! ----------------------------------------------------------------------------
!**************************************************************************************
PROC Depot(robtarget rPosDepot)

    ConfJ\On;
    ConfL\On;
	MoveJ RelTool(rPosDepot,0,0,Decalage), HighSpeed, z50, wi_tGripper\wobj:=wobjFeuille;
	MoveL rPosDepot, LowSpeed, fine,wi_tGripper\wobj:=wobjFeuille;
    Pince_ouverture;
    g_stop;
    !Pince_Ouvre;

	MoveL RelTool(rPosDepot,0,0,0), LowSpeed, fine,wi_tGripper\wobj:=wobjFeuille;
    MoveJ RelTool(rPosDepot,0,0,Decalage), HighSpeed, z50,wi_tGripper\wobj:=wobjFeuille;
    Confj\Off;
    ConfL\Off;

ENDPROC
!**************************************************************************************
! ----------------------------------------------------------------------------
! Procedure : Pince_ouverture
! Auteurs : Martin EUZENAT
! Date : 30/05/2024
! Révision : 1.1
! Révision par:
! Description :
! Routine permet la fermeture de la pince simulation/experimentation
!
PROC Pince_ouverture()
    IF IS_SIMULATED THEN 
        !SetDO custom_DO_0_gClose,0;
        !SetDO custom_DO_1_gOpen, 1;
        WaitTime 1.5;
    ELSE
        g_GripOut; !experimentation
        WaitTime 1.5;
    ENDIF
ENDPROC
!**************************************************************************************
! ----------------------------------------------------------------------------
! Procedure : Pince_fermeture 
! Auteurs : Martin EUZENAT
! Date : 30/05/2024
! Révision : 1.1
! Révision par :
! Description :
! Routine permet la fermeture de la pince simulation/experimentation
!
PROC Pince_fermeture()
    
    IF IS_SIMULATED THEN
        !SetDO custom_DO_0_gClose,1;
        !SetDO custom_DO_1_gOpen,0;
        WaitTime 1.5;
    ELSE
        g_GripIn; !experimentation
        WaitTime 1.5;
    ENDIF
ENDPROC

!**************************************************************************************
! ----------------------------------------------------------------------------
! Procedure : Securite
! Auteurs : Martin EUZENAT
! Date : 03/06/2024
! Révision : 1.2
! Révision par : Roberto Laframboise
! Description :
! Routine permet d'effectuer la routine de sécurité afin de débuter le fonctionnement
! du robot 
!
PROC Securite()
    AliasIO CabinetIO_0_DO4_JB01_LampBlu,LampeBleue;
    AliasIO CabinetIO_0_DO5_JB01_LampOr,LampeOrange;
    
    
    !MoveJ coin_feuille,HighSpeed,z50,wi_tGripper\WObj:=wobjFeuille;
    positionActuelle:= CPos();!ajouter wobjobejt
    !positionRetrait:= coin_feuille.trans;
    distanceSecurite:= Distance(positionActuelle,positionRetrait);
    
    IF distanceSecurite<=50 THEN ! Validation réussie, allume lampe bleue 2 secondes
        SetDO LampeBleue, 1;
        SetDO \SDelay:=2, LampeBleue, 0; !eteindre la lampe après 2s
        
        TPWrite "Validation de la position, Lancement programme!";
        
    ELSE ! Validation pas réussie, affiche le détail de l'erreur et la distance, allume lampe orange 5 secondes
        TPWrite "Distance non conforme, robot trop éloigné";
        TPWrite "Rapprochez le robot de "+differenceSecurite+" mm";
        SetDO LampeOrange, 1;
        
        WaitTime 5.0; ! temporisation de 5s
        SetDO LampeOrange, 0;
        EXIT; ! fin de programme
    ENDIF
    WaitTime 5.0;
ENDPROC

!**************************************************************************************
! ----------------------------------------------------------------------------
! Procedure : demande_configuration
! Auteurs : Martin EUZENAT
! Date : 30/05/2024
! Révision : 1.1
! Révision par:
! Description :
! Cette procédure permet de demander la configuration souhaiter par l'utilisateur 
!et de stocker ce choix dans le but de l'exploiter
!
PROC demande_configuration()
    TPErase;
    TPReadFK NbBranches, "Nombre de branches", "3", "4","5", "6", "7";
    
    TPWrite "Configuration prise en compte. Attention au robot";
    WaitTime 1.5;
    
ENDPROC
!**************************************************************************************

ENDMODULE


