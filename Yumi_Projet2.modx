MODULE Yumi_Projet2
!===========================================    
! Révisé par Ahmed Joubair (Septembre 2021)
!=========================================== 
! ----------------------------------------------------------------------------
! Programme : GPA546Lab1
! Auteurs : Martin ET Roberto
! Date : 22/05/2024
! Révision : 1.0
!
! Description :
! Ce programme permet de prendre deux blocs dans une glissoire et de les
! superposer sur une table de travail.
! ----------------------------------------------------------------------------

  ! Donnees de type position enseignees
  
  PERS wobjdata wobjTable;
  PERS wobjdata wobjFeuille;
  PERS robtarget rGlissoire:=[[-178.18,283.99,67.90],[0.200963,-0.681281,0.683955,0.166362],[0,0,0,5],[-16.6192,9E+09,9E+09,9E+09,9E+09,9E+09]];
  PERS robtarget rRetrait:=[[-266.00,14.12,221.80],[0.000550089,-0.980448,0.184406,0.0686662],[0,2,-2,5],[-1.30968,9E+09,9E+09,9E+09,9E+09,9E+09]];
  
  PERS robtarget rDepot:=[[-350.65,-89.54,24.38],[0.0307318,0.699666,-0.713584,0.0179325],[0,1,1,4],[-12.3598,9E+09,9E+09,9E+09,9E+09,9E+09]];
  

  PERS num NbBranches := 0; ! Valeur qui changera grace à la procédure de demande de config
  ! Donnees de type position calculees
  VAR robtarget rDepot2;

  ! Donnees de type constante
  CONST num Epaisseur:=1; ! Épaisseur d'un bloc (en pouces)
  CONST num PouceToMM:=25.4; ! Facteur de conversion
  CONST num Decalage:=200; ! Distance d'approche ou de retrait (mm)

  ! Données de type Variable
  VAR num EpaisMM:=0;
  VAR num distanceSecurite;
  VAR pos positionRetrait;
  VAR pos positionActuelle;
  VAR string differenceSecurite;
  VAR bool orientation;
  VAR robtarget rGlissoire_180;
  ! Vitesse d'approche et de retrait (mm/sec)
  CONST speeddata LowSpeed:=[250,500,5000,1000];
  
  ! Vitesse maximale du robot (mm/sec)
  CONST speeddata HighSpeed:=[1000,500,5000,1000];

  ! Etat des entrees/sorties
  CONST dionum Ouverte:=0;
  CONST dionum Fermee:=1;
  CONST dionum Retracte:=0;
  CONST dionum Extension:=1;

  ! Variable pour limiter la zone de travail du robot
  VAR wztemporary EspaceRestreint;
  
  !Alias
  VAR signaldo LampeBleue;
  VAR signaldo LampeOrange;
  VAR signaldi pieceOrientation;
  VAR signaldi piecePresente;
  VAR signaldi verinOut;
  VAR signaldi verinIn;
  VAR signaldo extensionVerin;

! ----------------------------------------------------------------------------
! Procedure : main
! Auteurs : Yanick Noiseux
! Date : 4-08-2011
! Révision : 1.1
! Révision par: Martin Gaudreault
! Description :
! Routine qui est executee par le robot initialement.
! **** elle doit être en mode "cycle"
!
! ----------------------------------------------------------------------------
!**************************************************************************************
PROC main()

	! 1) Initialisation :
	init;
    
    
    ! Deplacement a la position de repos
	MoveJ rRetrait, HighSpeed, fine, tPince\wobj:=wobj0;
    
    
    !Verification de la securité
    Securite;

    
    !demande_configuration;
	! 2) Calculs :
	EpaisMM := Epaisseur * PouceToMM; ! Conversion en mm
	rDepot2 := Offs(rDepot,0,0,EpaisMM);

	! 3) Déplacement du premier bloc :
	! Prise du bloc dans le glissoire
	Prise;
	! Dépôt du bloc 1 à la localisation rDepot :
	Depot(rDepot);

	! 4) Déplacement du deuxième bloc :
	! Prise du bloc dans le glissoire
	Prise;
	! Dépôt du bloc 2 à la localisation rDepot :
	Depot(rDepot2);

	! 5) Retourner le robot a la position de repos
	MoveJ rRetrait,HighSpeed, fine, tPince\wobj:=wobj0;
	
	
    !g_GripOut;! Ouvrir la pince
    Pince_ouverture;
    WaitTime 2;
    
    !Pince\Ouvert; 

ENDPROC
!**************************************************************************************

! ----------------------------------------------------------------------------
! Procedure : init
! Auteurs : Yanick Noiseux
! Date : 4-08-2011
! Révision : 1.1
! Révision par: Martin Gaudreault
! Description :
! Routine qui initialise les variables systèmes et les états des sorties
!
! ----------------------------------------------------------------------------
!**************************************************************************************
PROC init()


    ! %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Initialisation Smart gripper
    !g_Calibrate \Jog;
    G_init \Calibrate;
    !%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    
	VelSet 25,1000; ! Limitation imposée pour la sécurité, obligatoire

	SetDO CabinetIO_0_DO9_FV0101, Retracte; ! Rentrer le vérin         %% IRB1600: CabinetIO_0_DO9_FV0101, Retracte
	 

    !g_GripOut; ! Ouvrir la pince
    Pince_ouverture;
    WaitTime 2;
    
ENDPROC
!**************************************************************************************

! ----------------------------------------------------------------------------
! Procedure : Prise
! Auteurs : Yanick Noiseux
! Date : 4-08-2011
! Révision : 1.0
!
! Description :
! Routine qui s'approche du glissoire, atends une piece, 
! l'indexe et la prends de maniere securitaire
!
! ----------------------------------------------------------------------------
!**************************************************************************************
PROC Prise()
    AliasIO CabinetIO_0_DI9_ZS0101, piecePresente;
    AliasIO CabinetIO_0_DO9_FV0101,extensionVerin;
    AliasIO CabinetIO_0_DI14_ZS0104, verinOut;
    AliasIO CabinetIO_0_DI13_ZS0103,verinIn;
    AliasIO CabinetIO_0_DI10_ZS0102, pieceOrientation;
    rGlissoire_180:=RelTool(rGlissoire,0,0,0,\Rz:=180);
    ! Vérification de présence de bloc dans la glissoire
	IF piecePresente = 0 THEN
		TPErase;
		TPWrite "Aucun bloc dans la glissoire";
		TPWrite "Placer deux bloc et remettre en mode AUTO";
		WaitDI piecePresente, 1; ! Attente d'un bloc
		Waittime 1; ! attente que le bloc se stabilise
	ENDIF
    !Test orientation piece 
    IF pieceOrientation=0 THEN
!        ! Prehension du bloc
        MoveL  rGlissoire_180,HighSpeed,fine,tPince\wobj:=wobj0;

        MoveJ RelTool(rGlissoire,0,0,-Decalage),HighSpeed,z50,tPince\wobj:=wobj0;
        SetDO extensionVerin, Extension; ! Indexer le bloc durant le mouvement
        WAITDI verinOut,1; ! Attendre pour le vérin sortie
        SetDO extensionVerin, Retracte;
        !WAITDI CabinetIO_0_DI14_ZS0104,0;
        WAITDI verinIn,1;
        !g_GripIn; ! Fermer la pince
        Pince_fermeture;
        MoveL RelTool(rGlissoire,0,0,-Decalage),LowSpeed,z50,tPince\wobj:=wobj0;
       
    ELSEIF pieceOrientation=1 THEN
        ! Prehension du bloc
        
        MoveJ RelTool(rGlissoire,0,0,-Decalage),HighSpeed,z50,tPince\wobj:=wobj0;
        SetDO extensionVerin, Extension; ! Indexer le bloc durant le mouvement
        WAITDI verinOut,1; ! Attendre pour le vérin sortie
        MoveL rGlissoire, LowSpeed, fine, tPince\wobj:=wobj0;
        
        SetDO extensionVerin, Retracte;
        !WAITDI CabinetIO_0_DI14_ZS0104,0;
        WAITDI verinIn,1;
        !g_GripIn; ! Fermer la pince
        Pince_fermeture;
        MoveL RelTool(rGlissoire,0,0,-Decalage),LowSpeed,z50,tPince\wobj:=wobj0;
    ELSE
        
    ENDIF
	
	
ENDPROC
!**************************************************************************************

! ----------------------------------------------------------------------------
! Procedure : Depot
! Auteurs : Yanick Noiseux
! Date : 4-08-2011
! Révision : 1.1
! Révision par: Martin Gaudreault
! Description :
! Routine qui initialise les variables systèmes et les états des sorties
!
! Parametre: recoit un robtarget où aller déposer le bloc avec aproche et degagement
!
! ----------------------------------------------------------------------------
!**************************************************************************************
PROC Depot(robtarget rPosDepot)

	MoveJ RelTool(rPosDepot,0,0,-Decalage),HighSpeed, z50, tPince\wobj:=wobj0;
	MoveL rPosDepot,LowSpeed, fine, tPince\wobj:=wobj0;
	
    !g_GripOut;! Ouvrir la pince
    Pince_ouverture;
    g_stop;
	MoveL RelTool(rPosDepot,0,0,-Decalage),LowSpeed, z50, tPince\wobj:=wobj0;

ENDPROC
!**************************************************************************************
! ----------------------------------------------------------------------------
! Procedure : Pince_ouverture
! Auteurs : Martin EUZENAT
! Date : 30/05/2024
! Révision : 1.1
! Révision par:
! Description :
! Routine permet al fermeture de la pince dans la simulation
!
PROC Pince_ouverture()
    SetDO custom_DO_0_gClose,0;
    SetDO custom_DO_1_gOpen,1;
    WaitTime 2.0;
ENDPROC
!**************************************************************************************
! ----------------------------------------------------------------------------
! Procedure : Pince_fermeture 
! Auteurs : Martin EUZENAT
! Date : 30/05/2024
! Révision : 1.1
! Révision par :
! Description :
! Routine permet l'ouverture de la pince dans la simulation
!
PROC Pince_fermeture()
    SetDO custom_DO_0_gClose,1;
    SetDO custom_DO_1_gOpen,0;
    WaitTime 2.0;
ENDPROC

!**************************************************************************************
! ----------------------------------------------------------------------------
! Procedure : Securite
! Auteurs : Martin EUZENAT
! Date : 03/06/2024
! Révision : 1.2
! Révision par : Roberto Laframboise
! Description :
! Routine permet d'effectuer la routine de sécurité afin de débuter le fonctionnement
! du robot 
!
PROC Securite()
    AliasIO CabinetIO_0_DO4_JB01_LampBlu,LampeBleue;
    AliasIO CabinetIO_0_DO5_JB01_LampOr,LampeOrange;
    
    positionActuelle:= CPos();
    positionRetrait:= rRetrait.trans;
    distanceSecurite:= Distance(positionActuelle,positionRetrait);
    
    IF distanceSecurite<=50 THEN ! Validation réussie, allume lampe bleue 2 secondes
        SetDO LampeBleue, 1;
        SetDO \SDelay:=2, LampeBleue, 0;
        
    ELSE ! Validation pas réussie, affiche le détail de l'erreur et la distance, allume lampe orange 5 secondes
        TPWrite "Distance non conforme, robot trop éloigné";
        TPWrite "Rapprochez le robot de "+differenceSecurite+" mm";
        SetDO LampeOrange, 1;
        
        WaitTime 5.0; ! temporisation de 5s
        SetDO LampeOrange, 0;
        EXIT; ! fin de programme
    ENDIF
    
ENDPROC

!**************************************************************************************
! ----------------------------------------------------------------------------
! Procedure : demande_configuration
! Auteurs : Martin EUZENAT
! Date : 30/05/2024
! Révision : 1.1
! Révision par:
! Description :
! Cette procédure permet de demander la configuration souhaiter par l'utilisateur 
!et de stocker ce choix dans le but de l'exploiter
!
!PROC demande_configuration()
!    TPReadNum NbBranches, "Quelle configuration souhaitee vous? (3 a 7):";
!    WHILE 3< NbBranches OR NbBranches <7 DO
!        TPWrite "Nombre de branches non valide, veuillez reessayer";
!        TPReadNum NbBranches, "Quelle configuration souhaitee vous? (3 a 7):";
!    ENDWHILE
    
!ENDPROC
!**************************************************************************************


ENDMODULE

